


ARM Macro Assembler    Page 1 


    1 00000000         ; Exemplo.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; 12/03/2018
    5 00000000         
    6 00000000         ; ------------------------------------------------------
                       -------------------------
    7 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000         ; Declarações EQU - Defines
   10 00000000         ;<NOME>         EQU <VALOR>
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         ; Área de Dados - Declarações de variáveis
   13 00000000                 AREA             DATA, ALIGN=2
   14 00000000         ; Se alguma variável for chamada em outro arquivo
   15 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   16 00000000         ; partir de outro arquivo
   17 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   18 00000000         ; de <tam> bytes a partir da primeira 
   19 00000000         ; posição da RAM  
   20 00000000         
   21 00000000         ; ------------------------------------------------------
                       -------------------------
   22 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   23 00000000         ;                  código
   24 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000         
   26 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   27 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   28 00000000         ; outro arquivo. No caso startup.s
   29 00000000         
   30 00000000         ; Se chamar alguma função externa 
   31 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   32 00000000         ; função <func>
   33 00000000         
   34 00000000         ; ------------------------------------------------------
                       -------------------------
   35 00000000         ; Função main()
   36 00000000         Start
   37 00000000         ; Comece o código aqui <================================
                       ======================
   38 00000000         ; MOV R0, #65
   39 00000000         ; MOV R1, #0x1B00
   40 00000000         ; MOVT R1, #0x1B00
   41 00000000         ; MOV R2, #0x5678
   42 00000000         ; MOVT R2, #0x1234
   43 00000000         ; MOV R3, #0x0040
   44 00000000         ; MOVT R3, #0x2000



ARM Macro Assembler    Page 2 


   45 00000000         ; STR R0, [R3]
   46 00000000         ; STR R1, [R3, #4]
   47 00000000         ; STR R2, [R3, #8]
   48 00000000         ; MOV R4, #0x0001
   49 00000000         ; MOVT R4, #0x000F
   50 00000000         ; STR R4, [R3, #12]
   51 00000000         ; MOV R5, #0xCD
   52 00000000         ; STRH R5, [R3, #6]
   53 00000000         ; LDR R7, [R3]
   54 00000000         ; LDR R8, [R3, #8]
   55 00000000         ; MOV R9, R7
   56 00000000         ; MOV R1, #0xF0
   57 00000000         ; ANDS R0, R1, #2_01010101
   58 00000000         ; MOV R2, #2_11001100
   59 00000000         ; ANDS R1, R2, #2_00110011
   60 00000000         ; MOV R3, #2_10000000
   61 00000000         ; ORRS R2, R3, #2_00110111
   62 00000000         ; MOV R4, #0xABCD
   63 00000000         ; MOVT R4, #0xABCD
   64 00000000         ; MOV R3, #0xFFFF
   65 00000000         ; MOVT R3, #0x0000
   66 00000000         ; BICS R3, R4, R3
   67 00000000         ; MOV R1, #701
   68 00000000         ; LSRS R1, #5
   69 00000000         ; MOV R2, #32067
   70 00000000         ; NEG R2, R2
   71 00000000         ; LSRS R2, #4
   72 00000000         ; MOV R3, #701
   73 00000000         ; ASRS R3, #3
   74 00000000         ; MOV R4, #32067
   75 00000000         ; NEG R4, R4
   76 00000000         ; ASRS R4, #5
   77 00000000         ; MOV R5, #255
   78 00000000         ; LSRS R5, #8
   79 00000000         ; MOV R6, #58982
   80 00000000         ; NEG R6, R6
   81 00000000         ; LSRS R6, #18
   82 00000000         ; MOV R7, #0x1234
   83 00000000         ; MOVT R7, #0xFABC
   84 00000000         ; RORS R7, #10
   85 00000000         ; MOV R8, #0x4321
   86 00000000         ; RRXS R8, R8
   87 00000000         ; RRXS R8, R8
   88 00000000         ; MOV R0, #101
   89 00000000         ; ADDS R0, #253
   90 00000000         ; MOV R1, #40543
   91 00000000         ; ADD R1, #1500
   92 00000000         ; MOV R2, #340
   93 00000000         ; SUBS R2, #123
   94 00000000         ; MOV R3, #1000
   95 00000000         ; SUBS R3, #2000
   96 00000000         ; MOV R4, #54378
   97 00000000         ; MOV R9, #4
   98 00000000         ; MUL R4, R4, R9
   99 00000000         ; MOV R5, #0x3344
  100 00000000         ; MOVT R5, #0x1122
  101 00000000         ; MOV R6, #0x2211
  102 00000000         ; MOVT R6, #0x4433
  103 00000000         ; UMULL R7, R8, R5, R6



ARM Macro Assembler    Page 3 


  104 00000000         ; MOV R10, #0x7560
  105 00000000         ; MOVT R10, #0xFFFF
  106 00000000         ; MOV R11, #1000
  107 00000000         ; SDIV R10, R10, R11
  108 00000000         ; MOV R11, #0x7560
  109 00000000         ; MOVT R11, #0xFFFF
  110 00000000         ; MOV R12, #1000
  111 00000000         ; UDIV R11, R11, R12
  112 00000000         ; MOV R0, #10
  113 00000000         ; CMP R0, #9
  114 00000000         ; ITTE GE
  115 00000000         ;  MOVGE R1, #50
  116 00000000         ;  ADDGE R2, R1, #32
  117 00000000         ;  MOVLT R3, #75
  118 00000000         ; MOV R0, #10
  119 00000000         ; MOV R1, #0xCC22
  120 00000000         ; MOVT R1, #0xFF11
  121 00000000         ; MOV R2, #1234
  122 00000000         ; MOV R3, #0x300
  123 00000000         ; PUSH {R0}
  124 00000000         ; PUSH {R1}
  125 00000000         ; PUSH {R2}
  126 00000000         ; PUSH {R3}
  127 00000000         ; MOV R1, #60
  128 00000000         ; MOV R2, #0x1234
  129 00000000         ; POP {R3}
  130 00000000         ; POP {R2}
  131 00000000         ; POP {R1}
  132 00000000         ; POP {R0}
  133 00000000 F04F 000A       MOV              R0, #10
  134 00000004 3005    volta   ADDS             R0, #5
  135 00000006 2832            CMP              R0, #50
  136 00000008 D1FC            BNE              volta
  137 0000000A 2832            CMP              R0, #50
  138 0000000C D000            BEQ              func
  139 0000000E         chamada
  140 0000000E E008            B                fimfunc
  141 00000010 4601    func    MOV              R1, R0
  142 00000012 2932            CMP              R1, #50
  143 00000014 DA00            BGE              pula
  144 00000016 3101            ADDS             R1, #1
  145 00000018 F04F 0132 
                       pula    MOV              R1, #50
  146 0000001C F1C1 0100       NEG              R1, R1
  147 00000020 E7F5            B                chamada
  148 00000022         fimfunc
  149 00000022 BF00            NOP
  150 00000024 E7FE    trava   B                trava
  151 00000026         
  152 00000026         
  153 00000026 00 00           ALIGN                        ; garante que o fim
                                                             da seção está alin
                                                            hada 
  154 00000028                 END                          ; fim do arquivo
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\exemplo.d -o.\objects\exemplo.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -IC:\Keil_v5\ARM\
CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 5
26" --predefine="TM4C1294NCPDT SETA 1" --list=.\listings\exemplo.lst exemplo.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 13 in file exemplo.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file exemplo.s
   Uses
      None
Comment: .text unused
Start 00000000

Symbol: Start
   Definitions
      At line 36 in file exemplo.s
   Uses
      At line 27 in file exemplo.s
Comment: Start used once
chamada 0000000E

Symbol: chamada
   Definitions
      At line 139 in file exemplo.s
   Uses
      At line 147 in file exemplo.s
Comment: chamada used once
fimfunc 00000022

Symbol: fimfunc
   Definitions
      At line 148 in file exemplo.s
   Uses
      At line 140 in file exemplo.s
Comment: fimfunc used once
func 00000010

Symbol: func
   Definitions
      At line 141 in file exemplo.s
   Uses
      At line 138 in file exemplo.s
Comment: func used once
pula 00000018

Symbol: pula
   Definitions
      At line 145 in file exemplo.s
   Uses
      At line 143 in file exemplo.s
Comment: pula used once
trava 00000024

Symbol: trava
   Definitions
      At line 150 in file exemplo.s
   Uses
      At line 150 in file exemplo.s
Comment: trava used once
volta 00000004

Symbol: volta



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 134 in file exemplo.s
   Uses
      At line 136 in file exemplo.s
Comment: volta used once
8 symbols
343 symbols in table
